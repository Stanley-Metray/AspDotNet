@model List<AspDotNet.Models.EmailModel>

@{
    ViewData["Title"] = "Inbox";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - EmailReader</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .email-table {
            max-height: 70vh;
            overflow-y: auto;
            display: block;
        }

        table {
            min-width: 100%;
        }

        summary {
            cursor: pointer;
            color: #0d6efd;
            font-weight: 500;
        }

        details p {
            white-space: pre-wrap;
            margin-top: 0.5rem;
            max-height: 200px;
            overflow-y: auto;
            background-color: #f1f1f1;
            padding: 10px;
            border-radius: 5px;
        }

        .table-wrapper {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .truncate {
            max-width: 250px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
    </style>
</head>
<body>
    <div class="container my-5">
        <div class="table-wrapper">
            <h2 class="mb-4 text-center text-primary">📧 Inbox</h2>
            <div class="email-table">
                <table class="table table-striped align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th style="width: 20%;">From</th>
                            <th style="width: 30%;">Subject</th>
                            <th style="width: 20%;">Date</th>
                            <th style="width: 30%;">Body</th>
                        </tr>
                    </thead>
                    <tbody id="emailBody">
                        @foreach (var email in Model)
                        {
                            <tr>
                                <td class="truncate" title="@email.From">@email.From</td>
                                <td class="truncate" title="@email.Subject">@email.Subject</td>
                                <td class="truncate">@email.Date</td>
                                <td>
                                    <details>
                                        <summary>Show</summary>
                                        <p>@Html.Raw(email.Body)</p>
                                    </details>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        let latestSubject = "@(Model.FirstOrDefault()?.Subject ?? "")";

        async function fetchLatestEmail() {
            try {
                const response = await fetch("/email/latest");
                if (!response.ok) return;

                const email = await response.json();
                console.log("Latest email fetched:", email);

                if (email.subject !== latestSubject) {
                    latestSubject = email.subject;

                    const row = `<tr>
                        <td class="truncate" title="${email.from}">${email.from}</td>
                        <td class="truncate" title="${email.subject}">${email.subject}</td>
                        <td class="truncate">${email.date}</td>
                        <td>
                            <details>
                                <summary class="text-info">Show</summary>
                                <p>${email.body}</p>
                            </details>
                        </td>
                    </tr>`;

                    document.getElementById("emailBody").insertAdjacentHTML("afterbegin", row);
                }
            } catch (err) {
                console.error("Error polling for new email:", err);
            }
        }

        // Check for new email every 5 seconds
        setInterval(fetchLatestEmail, 5000);
    </script>
</body>
</html>
